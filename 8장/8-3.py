'''
class 클래스이름:    # ❶ 첫 행
    """독스트링"""   # ❷ 클래스의 의미와 역할 설명
    본문             # ❸ 클래스 공용 속성 정의
'''
'''
이름 표기법

파스칼 표기법(PascalCase): PythonProgramming처럼 단어와 단어를 대문자로 구별하는 방법이다. 
파이썬 프로그래밍에서 클래스 이름을 지을 때 사용한다.
뱀 표기법(snake_case): python_programming처럼 단어와 단어를 밑줄 기호로 구별하는 방법이다.
파이썬 프로그래밍에서 변수·함수의 이름을 지을 때 사용한다.
낙타 표기법(camelCase): pythonProgamming처럼 대문자로 단어를 구별하되 
첫 단어는 소문자로 쓰는 방법이다. 파이썬 프로그래밍에서는 잘 사용되지 않는다.
'''

'''
연습문제 8-5 좌표 클래스 정의하기

좌표를 나타내는 클래스 Coordinate를 정의해 보아라. 
이 클래스의 속성으로 x와 y를 정의하라. 두 속성의 값은 0으로 정의해 두면 된다.

지금 정의한 클래스는 이어지는 연습문제에서도 사용할 것이다.
'''

class Coordinate:
    """좌표를 나타내는 클래스"""
    x = 0
    y = 0

'''
개념 정리

클래스 속성: 클래스의 전체 특성을 나타내는 정보. 클래스 속에 정의된 이름이며 클래스에 속하는 인스턴스가 공유한다.
인스턴스 속성: 인스턴스의 고유한 특성을 나타내는 정보. 인스턴스 속에 정의된 이름이며 인스턴스마다 각자 따로 갖는다.
'''

point_1 = Coordinate()
point_2 = Coordinate()

point_1.x = -1
point_1.y = 2

point_2.x = 2
point_2.y = 3

print(str(point_1.x) + ","  +str(point_1.y))

'''
연습문제 8-7 좌표 인스턴스의 거리 계산하기

연습문제 8-6에서 생성한 두 인스턴스의 거리를 계산하려 한다. 
코드 8-2에서 정의한 두 점 사이의 거리를 계산하는 함수를 다음과 같이 정의하였다.

import math

def square(x):
    """전달받은 수의 제곱을 반환한다."""
    return x * x

def distance(point_a, point_b):
    """두 점 사이의 거리를 계산해 반환한다. (피타고라스의 정리)"""
    return math.sqrt(square(point_a['x'] - point_b['x']) +
                     square(point_a['y'] - point_b['y']))
이 함수를 참고해, Coordinate 인스턴스 두 개를 전달받아 거리를 계
산하는 함수 distance()를 정의해라.

다음은 이 함수를 이용해 인스턴스의 거리를 계산한 예다.

distance(point_1, point_2)   # 3.1622776601683795 반환
힌트: 매핑(사전)에 저장된 값을 읽는 방법과 클래스에서 속성을 읽는 방법은 문법이 서로 다르다.
'''

import math

def square(x):
    """전달받은 수의 제곱을 반환한다."""
    return x * x

def distance(point_a,point_b):
    """두 점 사이의 거리를 게산해 반환한다. 피타고라스의 정리"""
    return math.sqrt(square(point_a.x - point_b.x) +
    square(point_a.y-point_b.y))

print(distance(point_1,point_2))


'''
class 클래스이름:
    """독스트링"""
    클래스 공용 속성
    
    def 메서드():
        """이 클래스를 다루는 함수"""
        메서드 본문
    
    ...(필요한 만큼 메서드를 추가 정의)
'''

class Cake:
    """케익을 나타내는 클래스"""
    coat = '생크림'
    #
    def describe(self):
        """이 케익에 관한 정보를 화면에 출력한다."""
        print('이 케익은', self.coat, '으로 덮여 있다.')

cake_1 = Cake()  # 클래스를 새로 정의했으니, 인스턴스도 새로 생성해야 한다
cake_1.coat = '초콜릿'
cake_1.describe()

'''
class 클래스이름:
    """독스트링"""
    클래스 공용 속성
    
    def 메서드(self, ...):
        """이 클래스의 인스턴스를 self 매개변수에 전달받아 처리하는 함수"""
        메서드 본문
    
    ...(필요한 만큼 메서드를 추가 정의)
'''
'''
코드 8-33 인스턴스를 전달받는 메서드를 클래스 객체에서 호출하면 오류가 발생한다

Cake.describe()      # 클래스를 기준으로 메서드 호출: 오류
TypeError: describe() missing 1 required positional argument: 'self'
메서드는 여러 인스턴스가 공유하기 때문에 클래스의 속성으로 정의한다. 
그런데 메서드는 클래스가 아니라 인스턴스를 기준으로 실행할 때가 많다. 
정의하는 곳과 사용하는 곳이 다르다. 헷갈리지 않도록 주의하자.
-> Cake().describe()로 하면 에러 없이 사용 가능하다. => 에러가 나지 않는 건 Cake()이 되는 순간 
인스턴스가 되어버리기 때문이다. 
'''

""" 
개념 정리

메서드는 클래스와 인스턴스의 속성으로 정의된 함수이며, 특정 데이터 유형을 다루는 방법을 나타낸다.
메서드는 대부분 class 문 내부에서 클래스 공용 속성으로 정의된다.
메서드는 클래스 또는 인스턴스를 기준으로 호출할 수 있다. 
인스턴스를 기준으로 호출할 때는 인스턴스가 메서드에 전달된다. 
이를 통해 메서드에서 인스턴스 전용 속성에 접근할 수 있다.
"""

