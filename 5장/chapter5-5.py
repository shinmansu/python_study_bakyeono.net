#5.5 패킹과 언패킹

'''
컬렉션의 요소를 변수에 대입하거나 함수에 전달할 때 편의성을 높여주는 기능을 살펴보자.

5.5.1 대입문과 시퀀스
여러 데이터를 하나의 변수에 묶어 담기
변수 하나에는 데이터 하나만을 대입할 수 있다. 변수 하나가 여러 개의 데이터를 가리키도록 하려면 어떻게 해야 할까?
이 장에서 배운 것처럼, 여러 데이터를 컬렉션에 담고 그 컬렉션을 변수에 대입하면 된다.
'''

#코드 5-78 여러 개의 데이터를 하나의 변수에 담기
numbers = (1, 2, 3, 4, 5)

# 이렇게 데이터를 묶어 담는 것을 패킹이라 함

'''
반대로, 컬렉션을 풀어 요소를 여러 변수에 나눠 담아야 할 때도 있다. 
이 작업을 수행하려면 다음과 같이 꺼내려는 요소의 개수만큼 여러 행의 코드를 
작성해야 하여 불편하다.
'''

#코드 5-79 시퀀스의 데이터를 꺼내 변수에 대입하기

a = numbers[0]
b = numbers[1]
c = numbers[2]
d = numbers[3]
e = numbers[4]

print(a,b,c,d,e) # 값 출력

#이런 패킹과 언패킹을 더 쉽게 하는 방법이 있다

numbers = 1,2,3,4,5 #패킹
a,b,c,d,e = numbers #언패킹

# 패킹 => 시퀀스를 한 개의 변수에 대입하는 것
# 언패킹 => 시퀀스의 요소들을 여러 개의 변수들에 대입하는 것 (개수가 일치해야 함)

#a, b, c = numbers  # ❶ 대입문 양 변 시퀀스 길이 불일치 오류
#ValueError: too many values to unpack (expected 3)

a, b, c, d, _ = numbers  # ❷ 필요 없는 요소를 _ 변수에 대입
print(numbers) # 튜플 출력
print(a,b,c,d,e) # 값출력
a, _, _, d, _ = numbers  # ❸
print(numbers) # 튜플 출력


# 길이가 일치하지 않으면 오류가 발생하기 때문에 _처리를 해주는데 남은 요소를 한 번에 받는 방법이 있다

#남은 요소 대입받기
#대입문에서 좌변의 변수 중 하나에 별 기호(*)를 붙이면, 남은 요소 전체를 리스트에 담아 대입한다.

a,b,*rest = numbers# 1, 2를 제외한 나머지를 rest에 대입
print(a,b,rest)

*rest, c, d, e = numbers  # 3, 4, 5를 제외한 나머지를 rest에 대입

a, *rest, e = numbers     # 1, 5를 제외한 나머지를 rest에 대입

# 위치를 조정해가면서, 활용할 수 있다

# 코드 5-84 여러 행의 대입문을 하나로 줄이기

x = 10                # ❶ 여러 행으로 대입
y = -20
z = 0

x, y, z = 10, -20, 0  # ❷ 한 행으로 대입


'''
연습문제
연습문제 5-18 변수의 데이터 서로 교환하기

김파이 씨는 변수 x와 변수 y의 데이터를 서로 교환하여 출력하는 프로그램을 작성했다.

# 변수에 대입되어 있는 데이터
x = 10
y = -20

# 두 변수의 데이터를 서로 교환하기 (이 부분을 수정하시오)
x = y  # 변수 x에 변수 y의 데이터를 대입한다.
y = x  # 변수 y에 변수 x의 데이터를 대입한다.

# 바뀐 결과 출력
print(x)  # -20이 출력된다 (-20이 출력되어야 한다)
print(y)  # -20이 출력된다 (10이 출력되어야 한다)
'''
#그런데 프로그램을 실행해보니 두 변수의 데이터가 둘 다 -20이 되어 버렸다.
#  김파이 씨의 프로그램이 의도대로 동작하지 않은 이유는 무엇인가?
# 그 이유를 찾고 프로그램을 올바르게 수정해 보아라.


x = 10
y = -20

x,y = y,x

print(x)
print(y)

# 에러가 나는 이유 -> 변수 정의의 순서가 있기 때문에 Y->X X->Y 일 때
# 이미 X의 값이 변경 된 후  Y의 값에 대입 되는 것이기 때문에 동일 한 겂이 되어버린다
# 패킹을 통해서 동시에 처리를 해주면 이런 문제를 해결 할 수 있다

'''
시퀀스를 함수 매개변수에 전달하기
함수를 정의할 때, 인자를 전달받을 매개변수 목록을 정의하는 것을 기억할 것이다. 세 개의 매개변수를 갖는 다음 함수를 생각해 보자.

'''


#코드 5-85 여러 매개변수를 갖는 일반적인 함수의 모습

def date_to_string(y, m, d):
    """년(y), 월(m), 일(d)을 입력받아,'y년 m월 d일' 형태의 문자열을 반환한다."""
    return str(y) + '년 ' + str(m) + '월 ' + str(d) + '일'

print(date_to_string(2018,1,2))

'''
날짜 데이터를 (1917, 9, 4)와 같이 시퀀스로 정의해 두었다면, 
이 함수에 어떻게 전달해야 할까? 가장 기본적인 방법은 시퀀스에서 값을 
하나씩 꺼내 전달하는 것이다.
'''

#코드 5-86 시퀀스의 요소를 꺼내 함수에 전달하기

date = (1917, 9, 4)
print(date_to_string(date[0], date[1], date[2]))

'''
이 때, 언패킹을 이용하면 더 편리하게 함수에 값을 전달할 수 있다.
시퀀스의 요소를 하나씩 꺼낼 필요 없이, 
시퀀스 앞에 별 기호를 붙이면 시퀀스를 풀어 전달할 수 있다. 
시퀀스의 요소는 순서대로 함수의 매개변수에 대입된다.
'''

print(date_to_string(*date))

print(date_to_string(*[2001, 12, 31]))  # ❷

print(date_to_string(2017, *(9, 17)))  # ❸

'''
함수에서 데이터를 시퀀스로 묶어 전달받으려면 함수에 시퀀스를 전달받을 매개변수를 정의해 두어야 한다.
매개변수 목록을 정의할 때 시퀀스 패킹 매개변수로 사용할 변수의 이름 앞에 별 기호를 붙여 두면 된다. 
시퀀스 패킹 매개변수의 이름은 자유롭게 지을 수 있는데, 
인자들(arguments)을 의미하는 args라는 이름이 자주 사용된다. 
numbers 와 같은 좀 더 구체적인 이름을 사용하는 것도 좋다.
'''

def 산술평균(*args):
    """여러 개의 수를 전달 받아 산술평균을 계산한다."""
    if len(args) == 0:
        return None
    return sum(args) / len(args)

print(산술평균())
print(산술평균(1,2,3,4))

# *args로 리스트 전체를 언패킹해서 사용할 수 있도록 하기 때문에

# 데이터를 묶어 전달받는 함수에 시퀀스를 풀어 전달하기
# -> 전역변수를 함수에 활용해도 될까? / 매개 변수로 쓰는 건 오케이! 내부에서 이걸 다시 정의하지 않으면 됨
c
numbers = 1,2,3,4,5
print(산술평균(*numbers))

#코드 5-90 필수 매개변수와 나머지 매개변수 정의하기

def 가격계산(할인율, *구매가_목록):
    """구매가 목록을 합산하고 할인율을 반영해 가격을 계산한다."""
    return (1 - 할인율) * sum(구매가_목록)

가격계산(0.25, 100)


가격계산(0.25, 100, 200, 300, 400, 200)

'''
개념 정리

함수를 호출할 때, 시퀀스 데이터를 *[1, 2, 3]과 같이 별 기호 하나를 붙여 넘겨줄 수 있다.
그러면 시퀀스의 각 요소가 언패킹되어 함수의 매개변수에 제각각 대입된다.
함수를 정의할 때, 시퀀스 형태의 패킹 매개변수를 정의할 수 있다. 
별 기호 하나를 붙여 *args와 같이 정의한다. 
이 매개변수는 함수 호출시 다른 매개변수에 대입되지 못하고 남은 인자들을 튜플로 묶어 대입받는다. 
정해지지 않은 여러 개의 인자를 전달받는 함수를 정의할 때 활용할 수 있다.
'''

def mean2(*args):
    if len(args) == 0:
        return None
    return sum(args) / len(args)

print(mean2(*[10, 20, 30, 40]))