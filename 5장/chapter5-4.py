#집합

'''
집합의 특징

순서나 키 없이, 포함되는 원소를 모아 둔 데이터 구조다.
원소를 중복으로 저장하지 않는다.
합집합, 교집합 같은 수학의 집합 연산이 가능하다.
어떤 원소가 집합에 포함되었는지 검사할 수 있다.
'''
'''
원소가 하나인 집합

{원소1, 원소2, 원소3, …}

공집합

set()  # 빈 딕셔너리는 {}로 표현하도록 약속되어 있음!

'''

# 정수의 집합
int_set = {0, -127, 97, 1789}

# 이메일 주소의 집합
email_set = {'bakyeono@gmail.com', 'i@bakyeono.net'}

# 공집합
empty_set = set()


'''
연습문제 5-13 집합 정의하기

다음 세 집합을 각각 파이썬 코드로 정의하라.

* 한 주의 모든 요일
* 여러분이 학교나 직장에 가는 요일
* 여러분이 휴식을 취하는 요일
'''

all_day = {
    'Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday'
}

all_work_day = {
    'Monday','Tuesday','Wednesday','Thursday','Friday'
}

all_weekend_day = {
    'Saturday','Sunday'
}

print(set([6, 1, 1, 2, 3, 3, 1, 5, 5, 4]))
print(set(('사과', '토마토', '바나나', '감')))

#코드 5-61 레인지를 이용해 집합 정의하기
짝수 = set(range(0, 10000, 2))
홀수 = set(range(1, 10000, 2))

print(짝수)

'''
시퀀스에서 중복된 원소 제거하기
시퀀스의 중복 원소를 제거할 때 집합 변환을 활용할 수 있다. 
시퀀스를 집합으로 변환했다가 다시 시퀀스로 변환하면 된다.
단, 이 방법을 사용할 때는 중복 원소뿐 아니라 원소의 순서라는 중요한 정보가 함께 사라진다는 점에 유의해야 한다.
'''

print(list(set([6, 1, 1, 2, 3, 3, 1, 5, 5, 4])))
[1, 2, 3, 4, 5, 6]


'''
연습문제 5-14 중복 없이 시퀀스 합치기

0 이상 1000 미만의, 3의 배수 또는 4의 배수는 모두 몇 개인지 계산하라.

힌트: 레인지, 리스트, 집합을 모두 활용하자.
'''

three_or_four_count = len(list(range(0,1000,3))+list(range(0,1000,4)))-1

print(three_or_four_count)

들짐승 = {'사자', '박쥐', '늑대', '곰'}
날짐승 = {'독수리', '매', '박쥐'}
바다생물 = {'참치', '상어', '문어 괴물'}

print(len(들짐승))

'''
소속 검사하기
어떤 원소를 포함하는지 확인하는 것은 집합의 핵심 기능이다. 시퀀스에서 요소를 검사할 때, 그리고 매핑에서 키를 검사할 때처럼 in과 not in 예약어를 이용해 원소를 검사할 수 있다.

코드 5-65 집합에서 소속 검사하기

>>> '늑대' in 들짐승
True

>>> '곰' not in 들짐승
False
'''

#교집합

짐승 = 들짐승.union(날짐승)  # 들짐승과 날짐승의 합집합
print(짐승)

짐승 = 들짐승 | 날짐승 | {'인간'} #합집합 시프트 \ 키

print(짐승)

#합집합
들짐승_날짐승 =  들짐승.intersection(날짐승)  # 들짐승과 날짐승의 교집합
print(들짐승_날짐승)

들짐승_바다생물 = 들짐승.intersection(바다생물)  # 짐승과 바다생물의 교집합
print(들짐승_바다생물)
들짐승_바다생물 = 들짐승 & 날짐승 # 교집합

#차집합
짐승.difference(날짐승)