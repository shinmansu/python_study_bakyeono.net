#4-2 수

'''
정수란 ?

자연수에 음양부호(+,-)를 붙인 것

다음 정수들을 출력해보자
'''

print(10000)
print(10_000) #1만이 출력된다
print(-100000)

'''
팔진법과 십육진법

팔진법과 십육진법으로도 수를 표현할 수 있다 

팔진수 0o로 시작
십육진수 0x로 시작 

자릿수 하나가 0부터 15까지 표현할 수 있다. 하지만 우리가 흔히 사용하는 숫자는 0부터 9까지
밖에 없기 때문에 나머지 10은 A, 11은 B, 12는 C, 13은 D, 14는 E, 15는 F로 표현한다. 

질문 그럼 16진법으로 254는 어떻게 표현할까? 

'''

print(0o12)
print(0xff)

''' 
파이썬에서는 부동소수점 수(floating point number, 줄여서 float)라는 데이터 유형으로 실수를 다룬다.
부동소수점 수는 ‘소수점이 움직이는 수’라는 뜻이다. 이게 무슨 뜻인지는 곧이어 설명한다. 
편의상 부동소수점 수를 그냥 실수라고 부를 때가 많다.


과학 표기법
부동소수점 수를 이해하기 위해 과학 표기법에 관해 잠깐 알아보자. 
과학 표기법이란 매우 작은 수와 매우 큰 수를 다루는 일이 많은 과학 분야에서 수를 표기하는 방법이다. 
전자계산기에 매우 큰 수를 입력하면 화면에 ‘1.234e5’ 같은 수가 출력되는 것을 볼 수 있다. 
과학 표기법으로 표기된 수다.
'''

print(3.1415)

print(1.23e0)   # 1.23 * 10 ^ 0
print(1.23)

print(1.23e6)   # 1.23 * 10 ^ 6
print(1230000.0)

print(1.23e-4)  # 1.23 * 10 ^ -4
print(0.000123)


print(1.1-1.0)

print(1.2-1.1)

'''
파이썬의 실수 오차 

정수는 비트를 이용해 정확하게 표현할 수 있다. 
하지만 실수는 비트로 정확하게 표현하지 못한다.
이진법에서는 딱 나누어 떨어지는 소수가 별로 없기 때문이다. 

무한대
실수 데이터에는 양의 무한대와 음의 무한대가 있다. 
양의 무한대와 음의 무한대를 나타내는 데이터는 각각 float('inf')와 
float('-inf')라는 표현을 이용해 만든다. 
무한대는 다른 모든 수보다 크거나, 
다른 모든 수보다 작은 수를 표현해야 할 때 사용할 수 있다.
'''
print(float('inf'))          # 양의 무한대

print(float('-inf'))        # 음의 무한대

print(1e100 < float('inf'))  # 무한대는 다른 모든 실수보다 크다
print(True)

print(1e309) # 너무 큰 실수는 무한대로 평가된다

print(1e-324)                # 너무 0에 가까운 실수는 0으로 평가된다
print(0.0)

''' 
복소수 

파이썬에서 복소수를 표현할 때는 1+2j처럼 i만 j로 바꾸어 표기하면 된다. 


'''
#
# print(1-2j)         # 실수부가 1, 허수부가 -2인 복소수
#
# print((1-2j).real)  # 복소수의 실수부
#
#
# print((1-2j).imag)  # 복소수의 허수부
#
#
# print(round(10))  # 실수와 마찬가지로 정수도 반올림이 된다
#
# print((10).real)  # 정수에서 복소수의 실수부를 구하는 연산도 가능하다
#
#
# print(10 + 0.5)    # 정수와 실수의 연산 -> 실수
#
# print(0.5 * 1+2j)  # 실수와 복소수의 연산 -> 복소수
#

'''연습문제 4-1 프로그래머의 나이 표기

프로그래머 세 사람이 자신의 나이를 말하고 있다.

프로그래머 A: “저는 0x7d0”년에 태어났습니다. 올해로 0x12살이 되었네요.” 프로그래머 B: “그러시군요. 저는 올해 0o22세입니다.” 프로그래머 C: “저는 18살입니다.”

세 사람의 출생년은 각각 언제인가?

힌트: 대화식 셸에 팔진수 또는 십육진수를 입력하면 십진수로 출력된다.'''

print('저는',0x7d0,'년에 태어났습니다.','올해 나이는',0x12,'살입니다.')
print('저는 올해',0o22,'세 입니다.')
print(-25287e-2)

def almost_equal(number1,number2,threshold = 0.0001):
    """실수 2개를 입력 받아 그 차이가 0.0001 보다 작으면 True, 보다 크면 False를 출력한다."""
    return abs(number2-number1) < threshold


print(almost_equal(1.0,1.1))