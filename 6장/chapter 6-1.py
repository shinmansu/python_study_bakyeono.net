#선택

'''
선택은 프로그래밍에서도 매우 중요한 요소다.
앞 장까지 만들어 본 프로그램은 언제나 한 가지 흐름으로만 실행되었는데,
선택지와 조건을 고려하지 않았기 때문이다.
프로그램에 선택지와 조건을 마련해 두면 컴퓨터가 상황에 따라 적절하게 작업을 수행하도록 할 수 있다.
'''

#6.1.2 if 문


'''
코드 6-2 일요일 낮에 할 일 선택 1 (if1.py)
'''

print('일요일 낮의 날씨를 입력해주세요:')
날씨 = input()  # ❶

if 날씨 == '비':  # ❷
    print('집에서 프로그램을 만들자.')

if 날씨 != '비':  # ❸
    print('공원에서 스케이트보드를 타자.')

'''
실행 결과:

일요일 낮의 날씨를 입력해주세요:
맑음
공원에서 스케이트보드를 타자.
실행 과정을 생각해 보자. ❶에서 사용자의 입력에 의해 
날씨 변수에 '맑음'이 대입되었다. 
따라서 ❷의 if 문에서는 조건이 '맑음' == '비'가 되므로 거짓으로 평가되어 본문이 실행되지 않는다. 
❸의 if 문에서는 조건이 '맑음' != '비'가 되므로 참으로 평가되어 본문이 실행된다. 
그 결과, 화면에 ‘공원에서 스케이트보드를 타자.’라는 텍스트만 출력되었다.

개념 정리

if 문을 이용해 조건에 따라 실행할 코드를 선택하도록 할 수 있다.

선택은 여러 가능성이 열려 있어야 의미가 있다
선택은 여러 가능성이 열려 있어야 의미가 있다. 조건이 언제나 똑같이 평가되거나, 
선택지가 하나 뿐이라면 선택을 할 필요가 없다. 다음 경우를 생각해보자.

조건이 항상 참일 때: if 문의 본문이 항상 실행된다. if 문 없이 코드 본문을 작성하면 된다.
조건이 항상 거짓일 때: if 문의 본문이 절대 실행되지 않는다. 코드를 작성할 필요가 없다.
선택지가 하나뿐일 때: 조건을 따지지 않고 실행해야 할 코드다. if 문 없이 코드 본문을 작성하면 된다.
초보 프로그래머는 항상 참인 조건 또는 항상 거짓인 조건을 작성하는 실수를 저지를 때가 있다. 예를 들어, 
10 < x and x < 5 같은 조건은 변수 x에 어떤 값이 대입되든지 항상 거짓이 되는 조건이다.
수직선과 진리표(가능한 모든 조건과 결과를 나열한 표) 등을 이용하면 틀린 조건을 작성하는 것을 예방할 수 있다.

개념 정리
if 문을 이용해 조건에 따라 실행할 코드를 선택하도록 할 수 있다.
'''



